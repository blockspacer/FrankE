// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBUISTATEDATA_XFB_UI_H_
#define FLATBUFFERS_GENERATED_FBUISTATEDATA_XFB_UI_H_

#include "flatbuffers/flatbuffers.h"


namespace XFB_UI {

struct Vec3f;
struct Vec2f;
struct Align;
struct Scale;
struct Colour;
struct ResourceLocation;
struct GradientParam;
struct Gradient;
struct Padding;
struct Margin;
struct Thickness;
struct Border;
struct WidgetState;
struct Style;
struct Element;
struct Label;
struct Image;
struct Button;
struct CheckBox;
struct ComboBox;
struct ListItem;
struct Menu;
struct Navigation;
struct Console;
struct ProgressBar;
struct UIWindow;
struct Box;
struct Panel2D;
struct ComponentList;
struct StyleData;
struct StateData;

enum ElementState {
  ElementState_ES_NORMAL = 0,
  ElementState_ES_ACTIVE = 1,
  ElementState_ES_PRELIGHT = 2,
  ElementState_ES_SELECTED = 3,
  ElementState_ES_INSENSITIVE = 4
};

inline const char **EnumNamesElementState() {
  static const char *names[] = { "ES_NORMAL", "ES_ACTIVE", "ES_PRELIGHT", "ES_SELECTED", "ES_INSENSITIVE", nullptr };
  return names;
}

inline const char *EnumNameElementState(ElementState e) { return EnumNamesElementState()[static_cast<int>(e)]; }

enum StyleType {
  StyleType_ST_DEFAULT = 0,
  StyleType_ST_WINDOW = 1,
  StyleType_ST_PANEL2D = 2,
  StyleType_ST_MENU = 3,
  StyleType_ST_MENUITEM = 4,
  StyleType_ST_NAVIGATION = 5,
  StyleType_ST_NAVITEM = 6,
  StyleType_ST_LISTBOX = 7,
  StyleType_ST_COMBOBOX = 8,
  StyleType_ST_LABEL = 9,
  StyleType_ST_BUTTON = 10,
  StyleType_ST_PANEL3D = 11,
  StyleType_ST_CONSOLE = 12
};

inline const char **EnumNamesStyleType() {
  static const char *names[] = { "ST_DEFAULT", "ST_WINDOW", "ST_PANEL2D", "ST_MENU", "ST_MENUITEM", "ST_NAVIGATION", "ST_NAVITEM", "ST_LISTBOX", "ST_COMBOBOX", "ST_LABEL", "ST_BUTTON", "ST_PANEL3D", "ST_CONSOLE", nullptr };
  return names;
}

inline const char *EnumNameStyleType(StyleType e) { return EnumNamesStyleType()[static_cast<int>(e)]; }

enum GradientType {
  GradientType_GT_NorthSouth = 0,
  GradientType_GT_WestEast = 1,
  GradientType_GT_Diagonal = 2
};

inline const char **EnumNamesGradientType() {
  static const char *names[] = { "GT_NorthSouth", "GT_WestEast", "GT_Diagonal", nullptr };
  return names;
}

inline const char *EnumNameGradientType(GradientType e) { return EnumNamesGradientType()[static_cast<int>(e)]; }

enum ListItemType {
  ListItemType_NONE = 0,
  ListItemType_Label = 1,
  ListItemType_Button = 2,
  ListItemType_Image = 3
};

inline const char **EnumNamesListItemType() {
  static const char *names[] = { "NONE", "Label", "Button", "Image", nullptr };
  return names;
}

inline const char *EnumNameListItemType(ListItemType e) { return EnumNamesListItemType()[static_cast<int>(e)]; }

inline bool VerifyListItemType(flatbuffers::Verifier &verifier, const void *union_obj, ListItemType type);

enum MenuType {
  MenuType_MT_LIST = 0,
  MenuType_MT_SINGLE = 1,
  MenuType_MT_MULTI = 2
};

inline const char **EnumNamesMenuType() {
  static const char *names[] = { "MT_LIST", "MT_SINGLE", "MT_MULTI", nullptr };
  return names;
}

inline const char *EnumNameMenuType(MenuType e) { return EnumNamesMenuType()[static_cast<int>(e)]; }

enum Orientation {
  Orientation_horizontal = 0,
  Orientation_vertical = 1
};

inline const char **EnumNamesOrientation() {
  static const char *names[] = { "horizontal", "vertical", nullptr };
  return names;
}

inline const char *EnumNameOrientation(Orientation e) { return EnumNamesOrientation()[static_cast<int>(e)]; }

enum UComponent {
  UComponent_NONE = 0,
  UComponent_Label = 1,
  UComponent_Menu = 2,
  UComponent_Navigation = 3,
  UComponent_Console = 4,
  UComponent_Element = 5,
  UComponent_Button = 6,
  UComponent_Image = 7,
  UComponent_ProgressBar = 8
};

inline const char **EnumNamesUComponent() {
  static const char *names[] = { "NONE", "Label", "Menu", "Navigation", "Console", "Element", "Button", "Image", "ProgressBar", nullptr };
  return names;
}

inline const char *EnumNameUComponent(UComponent e) { return EnumNamesUComponent()[static_cast<int>(e)]; }

inline bool VerifyUComponent(flatbuffers::Verifier &verifier, const void *union_obj, UComponent type);

MANUALLY_ALIGNED_STRUCT(4) Vec3f FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3f(float _x, float _y, float _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vec3f, 12);

MANUALLY_ALIGNED_STRUCT(4) Vec2f FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2f(float _x, float _y)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(Vec2f, 8);

MANUALLY_ALIGNED_STRUCT(4) Align FLATBUFFERS_FINAL_CLASS {
 private:
  float vertical_;
  float horizontal_;

 public:
  Align(float _vertical, float _horizontal)
    : vertical_(flatbuffers::EndianScalar(_vertical)), horizontal_(flatbuffers::EndianScalar(_horizontal)) { }

  float vertical() const { return flatbuffers::EndianScalar(vertical_); }
  float horizontal() const { return flatbuffers::EndianScalar(horizontal_); }
};
STRUCT_END(Align, 8);

MANUALLY_ALIGNED_STRUCT(4) Scale FLATBUFFERS_FINAL_CLASS {
 private:
  float vertical_;
  float horizontal_;

 public:
  Scale(float _vertical, float _horizontal)
    : vertical_(flatbuffers::EndianScalar(_vertical)), horizontal_(flatbuffers::EndianScalar(_horizontal)) { }

  float vertical() const { return flatbuffers::EndianScalar(vertical_); }
  float horizontal() const { return flatbuffers::EndianScalar(horizontal_); }
};
STRUCT_END(Scale, 8);

MANUALLY_ALIGNED_STRUCT(4) Colour FLATBUFFERS_FINAL_CLASS {
 private:
  float r_;
  float g_;
  float b_;
  float a_;

 public:
  Colour(float _r, float _g, float _b, float _a)
    : r_(flatbuffers::EndianScalar(_r)), g_(flatbuffers::EndianScalar(_g)), b_(flatbuffers::EndianScalar(_b)), a_(flatbuffers::EndianScalar(_a)) { }

  float r() const { return flatbuffers::EndianScalar(r_); }
  float g() const { return flatbuffers::EndianScalar(g_); }
  float b() const { return flatbuffers::EndianScalar(b_); }
  float a() const { return flatbuffers::EndianScalar(a_); }
};
STRUCT_END(Colour, 16);

struct ResourceLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *locType() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *resGroup() const { return GetPointer<const flatbuffers::String *>(8); }
  uint8_t recursive() const { return GetField<uint8_t>(10, 0); }
  uint8_t readOnly() const { return GetField<uint8_t>(12, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* locType */) &&
           verifier.Verify(locType()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* resGroup */) &&
           verifier.Verify(resGroup()) &&
           VerifyField<uint8_t>(verifier, 10 /* recursive */) &&
           VerifyField<uint8_t>(verifier, 12 /* readOnly */) &&
           verifier.EndTable();
  }
};

struct ResourceLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_locType(flatbuffers::Offset<flatbuffers::String> locType) { fbb_.AddOffset(6, locType); }
  void add_resGroup(flatbuffers::Offset<flatbuffers::String> resGroup) { fbb_.AddOffset(8, resGroup); }
  void add_recursive(uint8_t recursive) { fbb_.AddElement<uint8_t>(10, recursive, 0); }
  void add_readOnly(uint8_t readOnly) { fbb_.AddElement<uint8_t>(12, readOnly, 0); }
  ResourceLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResourceLocationBuilder &operator=(const ResourceLocationBuilder &);
  flatbuffers::Offset<ResourceLocation> Finish() {
    auto o = flatbuffers::Offset<ResourceLocation>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<ResourceLocation> CreateResourceLocation(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> locType = 0,
   flatbuffers::Offset<flatbuffers::String> resGroup = 0,
   uint8_t recursive = 0,
   uint8_t readOnly = 0) {
  ResourceLocationBuilder builder_(_fbb);
  builder_.add_resGroup(resGroup);
  builder_.add_locType(locType);
  builder_.add_name(name);
  builder_.add_readOnly(readOnly);
  builder_.add_recursive(recursive);
  return builder_.Finish();
}

struct GradientParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Colour *color() const { return GetStruct<const Colour *>(4); }
  uint16_t offset() const { return GetField<uint16_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Colour>(verifier, 4 /* color */) &&
           VerifyField<uint16_t>(verifier, 6 /* offset */) &&
           verifier.EndTable();
  }
};

struct GradientParamBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color(const Colour *color) { fbb_.AddStruct(4, color); }
  void add_offset(uint16_t offset) { fbb_.AddElement<uint16_t>(6, offset, 0); }
  GradientParamBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GradientParamBuilder &operator=(const GradientParamBuilder &);
  flatbuffers::Offset<GradientParam> Finish() {
    auto o = flatbuffers::Offset<GradientParam>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GradientParam> CreateGradientParam(flatbuffers::FlatBufferBuilder &_fbb,
   const Colour *color = 0,
   uint16_t offset = 0) {
  GradientParamBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_offset(offset);
  return builder_.Finish();
}

struct Gradient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  GradientType type() const { return static_cast<GradientType>(GetField<int8_t>(4, 0)); }
  const GradientParam *sart() const { return GetPointer<const GradientParam *>(6); }
  const GradientParam *stop() const { return GetPointer<const GradientParam *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sart */) &&
           verifier.VerifyTable(sart()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* stop */) &&
           verifier.VerifyTable(stop()) &&
           verifier.EndTable();
  }
};

struct GradientBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(GradientType type) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(type), 0); }
  void add_sart(flatbuffers::Offset<GradientParam> sart) { fbb_.AddOffset(6, sart); }
  void add_stop(flatbuffers::Offset<GradientParam> stop) { fbb_.AddOffset(8, stop); }
  GradientBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GradientBuilder &operator=(const GradientBuilder &);
  flatbuffers::Offset<Gradient> Finish() {
    auto o = flatbuffers::Offset<Gradient>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Gradient> CreateGradient(flatbuffers::FlatBufferBuilder &_fbb,
   GradientType type = GradientType_GT_NorthSouth,
   flatbuffers::Offset<GradientParam> sart = 0,
   flatbuffers::Offset<GradientParam> stop = 0) {
  GradientBuilder builder_(_fbb);
  builder_.add_stop(stop);
  builder_.add_sart(sart);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Padding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t l() const { return GetField<uint16_t>(4, 0); }
  uint16_t t() const { return GetField<uint16_t>(6, 0); }
  uint16_t r() const { return GetField<uint16_t>(8, 0); }
  uint16_t b() const { return GetField<uint16_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* l */) &&
           VerifyField<uint16_t>(verifier, 6 /* t */) &&
           VerifyField<uint16_t>(verifier, 8 /* r */) &&
           VerifyField<uint16_t>(verifier, 10 /* b */) &&
           verifier.EndTable();
  }
};

struct PaddingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_l(uint16_t l) { fbb_.AddElement<uint16_t>(4, l, 0); }
  void add_t(uint16_t t) { fbb_.AddElement<uint16_t>(6, t, 0); }
  void add_r(uint16_t r) { fbb_.AddElement<uint16_t>(8, r, 0); }
  void add_b(uint16_t b) { fbb_.AddElement<uint16_t>(10, b, 0); }
  PaddingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PaddingBuilder &operator=(const PaddingBuilder &);
  flatbuffers::Offset<Padding> Finish() {
    auto o = flatbuffers::Offset<Padding>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Padding> CreatePadding(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t l = 0,
   uint16_t t = 0,
   uint16_t r = 0,
   uint16_t b = 0) {
  PaddingBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_r(r);
  builder_.add_t(t);
  builder_.add_l(l);
  return builder_.Finish();
}

struct Margin FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t l() const { return GetField<uint16_t>(4, 0); }
  uint16_t t() const { return GetField<uint16_t>(6, 0); }
  uint16_t r() const { return GetField<uint16_t>(8, 0); }
  uint16_t b() const { return GetField<uint16_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* l */) &&
           VerifyField<uint16_t>(verifier, 6 /* t */) &&
           VerifyField<uint16_t>(verifier, 8 /* r */) &&
           VerifyField<uint16_t>(verifier, 10 /* b */) &&
           verifier.EndTable();
  }
};

struct MarginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_l(uint16_t l) { fbb_.AddElement<uint16_t>(4, l, 0); }
  void add_t(uint16_t t) { fbb_.AddElement<uint16_t>(6, t, 0); }
  void add_r(uint16_t r) { fbb_.AddElement<uint16_t>(8, r, 0); }
  void add_b(uint16_t b) { fbb_.AddElement<uint16_t>(10, b, 0); }
  MarginBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MarginBuilder &operator=(const MarginBuilder &);
  flatbuffers::Offset<Margin> Finish() {
    auto o = flatbuffers::Offset<Margin>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Margin> CreateMargin(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t l = 0,
   uint16_t t = 0,
   uint16_t r = 0,
   uint16_t b = 0) {
  MarginBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_r(r);
  builder_.add_t(t);
  builder_.add_l(l);
  return builder_.Finish();
}

struct Thickness FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t l() const { return GetField<uint16_t>(4, 0); }
  uint16_t t() const { return GetField<uint16_t>(6, 0); }
  uint16_t r() const { return GetField<uint16_t>(8, 0); }
  uint16_t b() const { return GetField<uint16_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* l */) &&
           VerifyField<uint16_t>(verifier, 6 /* t */) &&
           VerifyField<uint16_t>(verifier, 8 /* r */) &&
           VerifyField<uint16_t>(verifier, 10 /* b */) &&
           verifier.EndTable();
  }
};

struct ThicknessBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_l(uint16_t l) { fbb_.AddElement<uint16_t>(4, l, 0); }
  void add_t(uint16_t t) { fbb_.AddElement<uint16_t>(6, t, 0); }
  void add_r(uint16_t r) { fbb_.AddElement<uint16_t>(8, r, 0); }
  void add_b(uint16_t b) { fbb_.AddElement<uint16_t>(10, b, 0); }
  ThicknessBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ThicknessBuilder &operator=(const ThicknessBuilder &);
  flatbuffers::Offset<Thickness> Finish() {
    auto o = flatbuffers::Offset<Thickness>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Thickness> CreateThickness(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t l = 0,
   uint16_t t = 0,
   uint16_t r = 0,
   uint16_t b = 0) {
  ThicknessBuilder builder_(_fbb);
  builder_.add_b(b);
  builder_.add_r(r);
  builder_.add_t(t);
  builder_.add_l(l);
  return builder_.Finish();
}

struct Border FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Padding *padding() const { return GetPointer<const Padding *>(4); }
  const Thickness *thickness() const { return GetPointer<const Thickness *>(6); }
  const Colour *brush() const { return GetStruct<const Colour *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* padding */) &&
           verifier.VerifyTable(padding()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* thickness */) &&
           verifier.VerifyTable(thickness()) &&
           VerifyField<Colour>(verifier, 8 /* brush */) &&
           verifier.EndTable();
  }
};

struct BorderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_padding(flatbuffers::Offset<Padding> padding) { fbb_.AddOffset(4, padding); }
  void add_thickness(flatbuffers::Offset<Thickness> thickness) { fbb_.AddOffset(6, thickness); }
  void add_brush(const Colour *brush) { fbb_.AddStruct(8, brush); }
  BorderBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BorderBuilder &operator=(const BorderBuilder &);
  flatbuffers::Offset<Border> Finish() {
    auto o = flatbuffers::Offset<Border>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Border> CreateBorder(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Padding> padding = 0,
   flatbuffers::Offset<Thickness> thickness = 0,
   const Colour *brush = 0) {
  BorderBuilder builder_(_fbb);
  builder_.add_brush(brush);
  builder_.add_thickness(thickness);
  builder_.add_padding(padding);
  return builder_.Finish();
}

struct WidgetState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *bgImage() const { return GetPointer<const flatbuffers::String *>(4); }
  const Gradient *bgGradient() const { return GetPointer<const Gradient *>(6); }
  uint8_t bgAnimated() const { return GetField<uint8_t>(8, 0); }
  const Colour *bgColour() const { return GetStruct<const Colour *>(10); }
  const Colour *colour() const { return GetStruct<const Colour *>(12); }
  const Padding *border() const { return GetPointer<const Padding *>(14); }
  uint32_t fontsize() const { return GetField<uint32_t>(16, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* bgImage */) &&
           verifier.Verify(bgImage()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* bgGradient */) &&
           verifier.VerifyTable(bgGradient()) &&
           VerifyField<uint8_t>(verifier, 8 /* bgAnimated */) &&
           VerifyField<Colour>(verifier, 10 /* bgColour */) &&
           VerifyField<Colour>(verifier, 12 /* colour */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* border */) &&
           verifier.VerifyTable(border()) &&
           VerifyField<uint32_t>(verifier, 16 /* fontsize */) &&
           verifier.EndTable();
  }
};

struct WidgetStateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bgImage(flatbuffers::Offset<flatbuffers::String> bgImage) { fbb_.AddOffset(4, bgImage); }
  void add_bgGradient(flatbuffers::Offset<Gradient> bgGradient) { fbb_.AddOffset(6, bgGradient); }
  void add_bgAnimated(uint8_t bgAnimated) { fbb_.AddElement<uint8_t>(8, bgAnimated, 0); }
  void add_bgColour(const Colour *bgColour) { fbb_.AddStruct(10, bgColour); }
  void add_colour(const Colour *colour) { fbb_.AddStruct(12, colour); }
  void add_border(flatbuffers::Offset<Padding> border) { fbb_.AddOffset(14, border); }
  void add_fontsize(uint32_t fontsize) { fbb_.AddElement<uint32_t>(16, fontsize, 0); }
  WidgetStateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WidgetStateBuilder &operator=(const WidgetStateBuilder &);
  flatbuffers::Offset<WidgetState> Finish() {
    auto o = flatbuffers::Offset<WidgetState>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<WidgetState> CreateWidgetState(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> bgImage = 0,
   flatbuffers::Offset<Gradient> bgGradient = 0,
   uint8_t bgAnimated = 0,
   const Colour *bgColour = 0,
   const Colour *colour = 0,
   flatbuffers::Offset<Padding> border = 0,
   uint32_t fontsize = 0) {
  WidgetStateBuilder builder_(_fbb);
  builder_.add_fontsize(fontsize);
  builder_.add_border(border);
  builder_.add_colour(colour);
  builder_.add_bgColour(bgColour);
  builder_.add_bgGradient(bgGradient);
  builder_.add_bgImage(bgImage);
  builder_.add_bgAnimated(bgAnimated);
  return builder_.Finish();
}

struct Style FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  StyleType type() const { return static_cast<StyleType>(GetField<int8_t>(6, 0)); }
  const WidgetState *normalState() const { return GetPointer<const WidgetState *>(8); }
  const WidgetState *activeState() const { return GetPointer<const WidgetState *>(10); }
  const WidgetState *prelightState() const { return GetPointer<const WidgetState *>(12); }
  const WidgetState *selectedState() const { return GetPointer<const WidgetState *>(14); }
  const WidgetState *insensitiveState() const { return GetPointer<const WidgetState *>(16); }
  const Scale *scale() const { return GetStruct<const Scale *>(18); }
  const Margin *margin() const { return GetPointer<const Margin *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, 6 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* normalState */) &&
           verifier.VerifyTable(normalState()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* activeState */) &&
           verifier.VerifyTable(activeState()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* prelightState */) &&
           verifier.VerifyTable(prelightState()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* selectedState */) &&
           verifier.VerifyTable(selectedState()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* insensitiveState */) &&
           verifier.VerifyTable(insensitiveState()) &&
           VerifyField<Scale>(verifier, 18 /* scale */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* margin */) &&
           verifier.VerifyTable(margin()) &&
           verifier.EndTable();
  }
};

struct StyleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_type(StyleType type) { fbb_.AddElement<int8_t>(6, static_cast<int8_t>(type), 0); }
  void add_normalState(flatbuffers::Offset<WidgetState> normalState) { fbb_.AddOffset(8, normalState); }
  void add_activeState(flatbuffers::Offset<WidgetState> activeState) { fbb_.AddOffset(10, activeState); }
  void add_prelightState(flatbuffers::Offset<WidgetState> prelightState) { fbb_.AddOffset(12, prelightState); }
  void add_selectedState(flatbuffers::Offset<WidgetState> selectedState) { fbb_.AddOffset(14, selectedState); }
  void add_insensitiveState(flatbuffers::Offset<WidgetState> insensitiveState) { fbb_.AddOffset(16, insensitiveState); }
  void add_scale(const Scale *scale) { fbb_.AddStruct(18, scale); }
  void add_margin(flatbuffers::Offset<Margin> margin) { fbb_.AddOffset(20, margin); }
  StyleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StyleBuilder &operator=(const StyleBuilder &);
  flatbuffers::Offset<Style> Finish() {
    auto o = flatbuffers::Offset<Style>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<Style> CreateStyle(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   StyleType type = StyleType_ST_DEFAULT,
   flatbuffers::Offset<WidgetState> normalState = 0,
   flatbuffers::Offset<WidgetState> activeState = 0,
   flatbuffers::Offset<WidgetState> prelightState = 0,
   flatbuffers::Offset<WidgetState> selectedState = 0,
   flatbuffers::Offset<WidgetState> insensitiveState = 0,
   const Scale *scale = 0,
   flatbuffers::Offset<Margin> margin = 0) {
  StyleBuilder builder_(_fbb);
  builder_.add_margin(margin);
  builder_.add_scale(scale);
  builder_.add_insensitiveState(insensitiveState);
  builder_.add_selectedState(selectedState);
  builder_.add_prelightState(prelightState);
  builder_.add_activeState(activeState);
  builder_.add_normalState(normalState);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Element FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint16_t id() const { return GetField<uint16_t>(6, 0); }
  const Align *align() const { return GetStruct<const Align *>(8); }
  const Scale *scale() const { return GetStruct<const Scale *>(10); }
  const Vec2f *positon() const { return GetStruct<const Vec2f *>(12); }
  uint32_t width() const { return GetField<uint32_t>(14, 0); }
  uint32_t height() const { return GetField<uint32_t>(16, 0); }
  uint16_t rotation() const { return GetField<uint16_t>(18, 0); }
  const flatbuffers::String *tooltip() const { return GetPointer<const flatbuffers::String *>(20); }
  const flatbuffers::String *atlas() const { return GetPointer<const flatbuffers::String *>(22); }
  uint16_t group() const { return GetField<uint16_t>(24, 0); }
  uint8_t isEnabled() const { return GetField<uint8_t>(26, 0); }
  const Style *style() const { return GetPointer<const Style *>(28); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint16_t>(verifier, 6 /* id */) &&
           VerifyField<Align>(verifier, 8 /* align */) &&
           VerifyField<Scale>(verifier, 10 /* scale */) &&
           VerifyField<Vec2f>(verifier, 12 /* positon */) &&
           VerifyField<uint32_t>(verifier, 14 /* width */) &&
           VerifyField<uint32_t>(verifier, 16 /* height */) &&
           VerifyField<uint16_t>(verifier, 18 /* rotation */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* tooltip */) &&
           verifier.Verify(tooltip()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* atlas */) &&
           verifier.Verify(atlas()) &&
           VerifyField<uint16_t>(verifier, 24 /* group */) &&
           VerifyField<uint8_t>(verifier, 26 /* isEnabled */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* style */) &&
           verifier.VerifyTable(style()) &&
           verifier.EndTable();
  }
};

struct ElementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_id(uint16_t id) { fbb_.AddElement<uint16_t>(6, id, 0); }
  void add_align(const Align *align) { fbb_.AddStruct(8, align); }
  void add_scale(const Scale *scale) { fbb_.AddStruct(10, scale); }
  void add_positon(const Vec2f *positon) { fbb_.AddStruct(12, positon); }
  void add_width(uint32_t width) { fbb_.AddElement<uint32_t>(14, width, 0); }
  void add_height(uint32_t height) { fbb_.AddElement<uint32_t>(16, height, 0); }
  void add_rotation(uint16_t rotation) { fbb_.AddElement<uint16_t>(18, rotation, 0); }
  void add_tooltip(flatbuffers::Offset<flatbuffers::String> tooltip) { fbb_.AddOffset(20, tooltip); }
  void add_atlas(flatbuffers::Offset<flatbuffers::String> atlas) { fbb_.AddOffset(22, atlas); }
  void add_group(uint16_t group) { fbb_.AddElement<uint16_t>(24, group, 0); }
  void add_isEnabled(uint8_t isEnabled) { fbb_.AddElement<uint8_t>(26, isEnabled, 0); }
  void add_style(flatbuffers::Offset<Style> style) { fbb_.AddOffset(28, style); }
  ElementBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ElementBuilder &operator=(const ElementBuilder &);
  flatbuffers::Offset<Element> Finish() {
    auto o = flatbuffers::Offset<Element>(fbb_.EndTable(start_, 13));
    return o;
  }
};

inline flatbuffers::Offset<Element> CreateElement(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint16_t id = 0,
   const Align *align = 0,
   const Scale *scale = 0,
   const Vec2f *positon = 0,
   uint32_t width = 0,
   uint32_t height = 0,
   uint16_t rotation = 0,
   flatbuffers::Offset<flatbuffers::String> tooltip = 0,
   flatbuffers::Offset<flatbuffers::String> atlas = 0,
   uint16_t group = 0,
   uint8_t isEnabled = 0,
   flatbuffers::Offset<Style> style = 0) {
  ElementBuilder builder_(_fbb);
  builder_.add_style(style);
  builder_.add_atlas(atlas);
  builder_.add_tooltip(tooltip);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_positon(positon);
  builder_.add_scale(scale);
  builder_.add_align(align);
  builder_.add_name(name);
  builder_.add_group(group);
  builder_.add_rotation(rotation);
  builder_.add_id(id);
  builder_.add_isEnabled(isEnabled);
  return builder_.Finish();
}

struct Label FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  uint16_t fontSize() const { return GetField<uint16_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint16_t>(verifier, 6 /* fontSize */) &&
           verifier.EndTable();
  }
};

struct LabelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_fontSize(uint16_t fontSize) { fbb_.AddElement<uint16_t>(6, fontSize, 0); }
  LabelBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  LabelBuilder &operator=(const LabelBuilder &);
  flatbuffers::Offset<Label> Finish() {
    auto o = flatbuffers::Offset<Label>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Label> CreateLabel(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   uint16_t fontSize = 0) {
  LabelBuilder builder_(_fbb);
  builder_.add_base(base);
  builder_.add_fontSize(fontSize);
  return builder_.Finish();
}

struct Image FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct ImageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  ImageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ImageBuilder &operator=(const ImageBuilder &);
  flatbuffers::Offset<Image> Finish() {
    auto o = flatbuffers::Offset<Image>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Image> CreateImage(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0) {
  ImageBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct Button FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  const flatbuffers::String *image() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *itemsource() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *onclicked() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *onhover() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* image */) &&
           verifier.Verify(image()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* itemsource */) &&
           verifier.Verify(itemsource()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* onclicked */) &&
           verifier.Verify(onclicked()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* onhover */) &&
           verifier.Verify(onhover()) &&
           verifier.EndTable();
  }
};

struct ButtonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_image(flatbuffers::Offset<flatbuffers::String> image) { fbb_.AddOffset(6, image); }
  void add_itemsource(flatbuffers::Offset<flatbuffers::String> itemsource) { fbb_.AddOffset(8, itemsource); }
  void add_onclicked(flatbuffers::Offset<flatbuffers::String> onclicked) { fbb_.AddOffset(10, onclicked); }
  void add_onhover(flatbuffers::Offset<flatbuffers::String> onhover) { fbb_.AddOffset(12, onhover); }
  ButtonBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ButtonBuilder &operator=(const ButtonBuilder &);
  flatbuffers::Offset<Button> Finish() {
    auto o = flatbuffers::Offset<Button>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<Button> CreateButton(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   flatbuffers::Offset<flatbuffers::String> image = 0,
   flatbuffers::Offset<flatbuffers::String> itemsource = 0,
   flatbuffers::Offset<flatbuffers::String> onclicked = 0,
   flatbuffers::Offset<flatbuffers::String> onhover = 0) {
  ButtonBuilder builder_(_fbb);
  builder_.add_onhover(onhover);
  builder_.add_onclicked(onclicked);
  builder_.add_itemsource(itemsource);
  builder_.add_image(image);
  builder_.add_base(base);
  return builder_.Finish();
}

struct CheckBox FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct CheckBoxBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  CheckBoxBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CheckBoxBuilder &operator=(const CheckBoxBuilder &);
  flatbuffers::Offset<CheckBox> Finish() {
    auto o = flatbuffers::Offset<CheckBox>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CheckBox> CreateCheckBox(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0) {
  CheckBoxBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct ComboBox FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *items() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* items */) &&
           verifier.Verify(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           verifier.EndTable();
  }
};

struct ComboBoxBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items) { fbb_.AddOffset(6, items); }
  ComboBoxBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ComboBoxBuilder &operator=(const ComboBoxBuilder &);
  flatbuffers::Offset<ComboBox> Finish() {
    auto o = flatbuffers::Offset<ComboBox>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ComboBox> CreateComboBox(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items = 0) {
  ComboBoxBuilder builder_(_fbb);
  builder_.add_items(items);
  builder_.add_base(base);
  return builder_.Finish();
}

struct ListItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ListItemType listItemType_type() const { return static_cast<ListItemType>(GetField<uint8_t>(4, 0)); }
  const void *listItemType() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* listItemType_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* listItemType */) &&
           VerifyListItemType(verifier, listItemType(), listItemType_type()) &&
           verifier.EndTable();
  }
};

struct ListItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_listItemType_type(ListItemType listItemType_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(listItemType_type), 0); }
  void add_listItemType(flatbuffers::Offset<void> listItemType) { fbb_.AddOffset(6, listItemType); }
  ListItemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ListItemBuilder &operator=(const ListItemBuilder &);
  flatbuffers::Offset<ListItem> Finish() {
    auto o = flatbuffers::Offset<ListItem>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ListItem> CreateListItem(flatbuffers::FlatBufferBuilder &_fbb,
   ListItemType listItemType_type = ListItemType_NONE,
   flatbuffers::Offset<void> listItemType = 0) {
  ListItemBuilder builder_(_fbb);
  builder_.add_listItemType(listItemType);
  builder_.add_listItemType_type(listItemType_type);
  return builder_.Finish();
}

struct Menu FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  uint16_t displayedElements() const { return GetField<uint16_t>(6, 0); }
  MenuType type() const { return static_cast<MenuType>(GetField<int8_t>(8, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *items() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *>(10); }
  uint32_t itemWidth() const { return GetField<uint32_t>(12, 0); }
  uint32_t itemHeight() const { return GetField<uint32_t>(14, 0); }
  const flatbuffers::String *onSelectionChanged() const { return GetPointer<const flatbuffers::String *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint16_t>(verifier, 6 /* displayedElements */) &&
           VerifyField<int8_t>(verifier, 8 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* items */) &&
           verifier.Verify(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           VerifyField<uint32_t>(verifier, 12 /* itemWidth */) &&
           VerifyField<uint32_t>(verifier, 14 /* itemHeight */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* onSelectionChanged */) &&
           verifier.Verify(onSelectionChanged()) &&
           verifier.EndTable();
  }
};

struct MenuBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_displayedElements(uint16_t displayedElements) { fbb_.AddElement<uint16_t>(6, displayedElements, 0); }
  void add_type(MenuType type) { fbb_.AddElement<int8_t>(8, static_cast<int8_t>(type), 0); }
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items) { fbb_.AddOffset(10, items); }
  void add_itemWidth(uint32_t itemWidth) { fbb_.AddElement<uint32_t>(12, itemWidth, 0); }
  void add_itemHeight(uint32_t itemHeight) { fbb_.AddElement<uint32_t>(14, itemHeight, 0); }
  void add_onSelectionChanged(flatbuffers::Offset<flatbuffers::String> onSelectionChanged) { fbb_.AddOffset(16, onSelectionChanged); }
  MenuBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MenuBuilder &operator=(const MenuBuilder &);
  flatbuffers::Offset<Menu> Finish() {
    auto o = flatbuffers::Offset<Menu>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<Menu> CreateMenu(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   uint16_t displayedElements = 0,
   MenuType type = MenuType_MT_LIST,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items = 0,
   uint32_t itemWidth = 0,
   uint32_t itemHeight = 0,
   flatbuffers::Offset<flatbuffers::String> onSelectionChanged = 0) {
  MenuBuilder builder_(_fbb);
  builder_.add_onSelectionChanged(onSelectionChanged);
  builder_.add_itemHeight(itemHeight);
  builder_.add_itemWidth(itemWidth);
  builder_.add_items(items);
  builder_.add_base(base);
  builder_.add_displayedElements(displayedElements);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Navigation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  MenuType type() const { return static_cast<MenuType>(GetField<int8_t>(6, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *items() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ListItem>> *>(8); }
  uint32_t itemWidth() const { return GetField<uint32_t>(10, 0); }
  uint32_t itemHeight() const { return GetField<uint32_t>(12, 0); }
  const flatbuffers::String *onSelectionChanged() const { return GetPointer<const flatbuffers::String *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<int8_t>(verifier, 6 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* items */) &&
           verifier.Verify(items()) &&
           verifier.VerifyVectorOfTables(items()) &&
           VerifyField<uint32_t>(verifier, 10 /* itemWidth */) &&
           VerifyField<uint32_t>(verifier, 12 /* itemHeight */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* onSelectionChanged */) &&
           verifier.Verify(onSelectionChanged()) &&
           verifier.EndTable();
  }
};

struct NavigationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_type(MenuType type) { fbb_.AddElement<int8_t>(6, static_cast<int8_t>(type), 0); }
  void add_items(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items) { fbb_.AddOffset(8, items); }
  void add_itemWidth(uint32_t itemWidth) { fbb_.AddElement<uint32_t>(10, itemWidth, 0); }
  void add_itemHeight(uint32_t itemHeight) { fbb_.AddElement<uint32_t>(12, itemHeight, 0); }
  void add_onSelectionChanged(flatbuffers::Offset<flatbuffers::String> onSelectionChanged) { fbb_.AddOffset(14, onSelectionChanged); }
  NavigationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NavigationBuilder &operator=(const NavigationBuilder &);
  flatbuffers::Offset<Navigation> Finish() {
    auto o = flatbuffers::Offset<Navigation>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<Navigation> CreateNavigation(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   MenuType type = MenuType_MT_LIST,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ListItem>>> items = 0,
   uint32_t itemWidth = 0,
   uint32_t itemHeight = 0,
   flatbuffers::Offset<flatbuffers::String> onSelectionChanged = 0) {
  NavigationBuilder builder_(_fbb);
  builder_.add_onSelectionChanged(onSelectionChanged);
  builder_.add_itemHeight(itemHeight);
  builder_.add_itemWidth(itemWidth);
  builder_.add_items(items);
  builder_.add_base(base);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Console FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  uint32_t fontsize() const { return GetField<uint32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<uint32_t>(verifier, 6 /* fontsize */) &&
           verifier.EndTable();
  }
};

struct ConsoleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_fontsize(uint32_t fontsize) { fbb_.AddElement<uint32_t>(6, fontsize, 0); }
  ConsoleBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ConsoleBuilder &operator=(const ConsoleBuilder &);
  flatbuffers::Offset<Console> Finish() {
    auto o = flatbuffers::Offset<Console>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Console> CreateConsole(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   uint32_t fontsize = 0) {
  ConsoleBuilder builder_(_fbb);
  builder_.add_fontsize(fontsize);
  builder_.add_base(base);
  return builder_.Finish();
}

struct ProgressBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct ProgressBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  ProgressBarBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ProgressBarBuilder &operator=(const ProgressBarBuilder &);
  flatbuffers::Offset<ProgressBar> Finish() {
    auto o = flatbuffers::Offset<ProgressBar>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ProgressBar> CreateProgressBar(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0) {
  ProgressBarBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct UIWindow FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  const Panel2D *panel() const { return GetPointer<const Panel2D *>(6); }
  uint8_t showHead() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* panel */) &&
           verifier.VerifyTable(panel()) &&
           VerifyField<uint8_t>(verifier, 8 /* showHead */) &&
           verifier.EndTable();
  }
};

struct UIWindowBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_panel(flatbuffers::Offset<Panel2D> panel) { fbb_.AddOffset(6, panel); }
  void add_showHead(uint8_t showHead) { fbb_.AddElement<uint8_t>(8, showHead, 0); }
  UIWindowBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UIWindowBuilder &operator=(const UIWindowBuilder &);
  flatbuffers::Offset<UIWindow> Finish() {
    auto o = flatbuffers::Offset<UIWindow>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<UIWindow> CreateUIWindow(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   flatbuffers::Offset<Panel2D> panel = 0,
   uint8_t showHead = 0) {
  UIWindowBuilder builder_(_fbb);
  builder_.add_panel(panel);
  builder_.add_base(base);
  builder_.add_showHead(showHead);
  return builder_.Finish();
}

struct Box FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *components() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *>(6); }
  Orientation orientation() const { return static_cast<Orientation>(GetField<int8_t>(8, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* components */) &&
           verifier.Verify(components()) &&
           verifier.VerifyVectorOfTables(components()) &&
           VerifyField<int8_t>(verifier, 8 /* orientation */) &&
           verifier.EndTable();
  }
};

struct BoxBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_components(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components) { fbb_.AddOffset(6, components); }
  void add_orientation(Orientation orientation) { fbb_.AddElement<int8_t>(8, static_cast<int8_t>(orientation), 0); }
  BoxBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BoxBuilder &operator=(const BoxBuilder &);
  flatbuffers::Offset<Box> Finish() {
    auto o = flatbuffers::Offset<Box>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Box> CreateBox(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components = 0,
   Orientation orientation = Orientation_horizontal) {
  BoxBuilder builder_(_fbb);
  builder_.add_components(components);
  builder_.add_base(base);
  builder_.add_orientation(orientation);
  return builder_.Finish();
}

struct Panel2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Element *base() const { return GetPointer<const Element *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *components() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* base */) &&
           verifier.VerifyTable(base()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* components */) &&
           verifier.Verify(components()) &&
           verifier.VerifyVectorOfTables(components()) &&
           verifier.EndTable();
  }
};

struct Panel2DBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<Element> base) { fbb_.AddOffset(4, base); }
  void add_components(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components) { fbb_.AddOffset(6, components); }
  Panel2DBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Panel2DBuilder &operator=(const Panel2DBuilder &);
  flatbuffers::Offset<Panel2D> Finish() {
    auto o = flatbuffers::Offset<Panel2D>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Panel2D> CreatePanel2D(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Element> base = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components = 0) {
  Panel2DBuilder builder_(_fbb);
  builder_.add_components(components);
  builder_.add_base(base);
  return builder_.Finish();
}

struct ComponentList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  UComponent componentType_type() const { return static_cast<UComponent>(GetField<uint8_t>(4, 0)); }
  const void *componentType() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* componentType_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* componentType */) &&
           VerifyUComponent(verifier, componentType(), componentType_type()) &&
           verifier.EndTable();
  }
};

struct ComponentListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_componentType_type(UComponent componentType_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(componentType_type), 0); }
  void add_componentType(flatbuffers::Offset<void> componentType) { fbb_.AddOffset(6, componentType); }
  ComponentListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ComponentListBuilder &operator=(const ComponentListBuilder &);
  flatbuffers::Offset<ComponentList> Finish() {
    auto o = flatbuffers::Offset<ComponentList>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ComponentList> CreateComponentList(flatbuffers::FlatBufferBuilder &_fbb,
   UComponent componentType_type = UComponent_NONE,
   flatbuffers::Offset<void> componentType = 0) {
  ComponentListBuilder builder_(_fbb);
  builder_.add_componentType(componentType);
  builder_.add_componentType_type(componentType_type);
  return builder_.Finish();
}

struct StyleData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Style>> *styles() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Style>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* styles */) &&
           verifier.Verify(styles()) &&
           verifier.VerifyVectorOfTables(styles()) &&
           verifier.EndTable();
  }
};

struct StyleDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_styles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Style>>> styles) { fbb_.AddOffset(4, styles); }
  StyleDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StyleDataBuilder &operator=(const StyleDataBuilder &);
  flatbuffers::Offset<StyleData> Finish() {
    auto o = flatbuffers::Offset<StyleData>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<StyleData> CreateStyleData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Style>>> styles = 0) {
  StyleDataBuilder builder_(_fbb);
  builder_.add_styles(styles);
  return builder_.Finish();
}

struct StateData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *atlas() const { return GetPointer<const flatbuffers::String *>(4); }
  uint8_t autoDeleteAtlas() const { return GetField<uint8_t>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>> *locations() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *components() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ComponentList>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<Panel2D>> *panels2D() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Panel2D>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* atlas */) &&
           verifier.Verify(atlas()) &&
           VerifyField<uint8_t>(verifier, 6 /* autoDeleteAtlas */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* locations */) &&
           verifier.Verify(locations()) &&
           verifier.VerifyVectorOfTables(locations()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* components */) &&
           verifier.Verify(components()) &&
           verifier.VerifyVectorOfTables(components()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* panels2D */) &&
           verifier.Verify(panels2D()) &&
           verifier.VerifyVectorOfTables(panels2D()) &&
           verifier.EndTable();
  }
};

struct StateDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_atlas(flatbuffers::Offset<flatbuffers::String> atlas) { fbb_.AddOffset(4, atlas); }
  void add_autoDeleteAtlas(uint8_t autoDeleteAtlas) { fbb_.AddElement<uint8_t>(6, autoDeleteAtlas, 0); }
  void add_locations(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>>> locations) { fbb_.AddOffset(8, locations); }
  void add_components(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components) { fbb_.AddOffset(10, components); }
  void add_panels2D(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Panel2D>>> panels2D) { fbb_.AddOffset(12, panels2D); }
  StateDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StateDataBuilder &operator=(const StateDataBuilder &);
  flatbuffers::Offset<StateData> Finish() {
    auto o = flatbuffers::Offset<StateData>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<StateData> CreateStateData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> atlas = 0,
   uint8_t autoDeleteAtlas = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>>> locations = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ComponentList>>> components = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Panel2D>>> panels2D = 0) {
  StateDataBuilder builder_(_fbb);
  builder_.add_panels2D(panels2D);
  builder_.add_components(components);
  builder_.add_locations(locations);
  builder_.add_atlas(atlas);
  builder_.add_autoDeleteAtlas(autoDeleteAtlas);
  return builder_.Finish();
}

inline bool VerifyListItemType(flatbuffers::Verifier &verifier, const void *union_obj, ListItemType type) {
  switch (type) {
    case ListItemType_NONE: return true;
    case ListItemType_Label: return verifier.VerifyTable(reinterpret_cast<const Label *>(union_obj));
    case ListItemType_Button: return verifier.VerifyTable(reinterpret_cast<const Button *>(union_obj));
    case ListItemType_Image: return verifier.VerifyTable(reinterpret_cast<const Image *>(union_obj));
    default: return false;
  }
}

inline bool VerifyUComponent(flatbuffers::Verifier &verifier, const void *union_obj, UComponent type) {
  switch (type) {
    case UComponent_NONE: return true;
    case UComponent_Label: return verifier.VerifyTable(reinterpret_cast<const Label *>(union_obj));
    case UComponent_Menu: return verifier.VerifyTable(reinterpret_cast<const Menu *>(union_obj));
    case UComponent_Navigation: return verifier.VerifyTable(reinterpret_cast<const Navigation *>(union_obj));
    case UComponent_Console: return verifier.VerifyTable(reinterpret_cast<const Console *>(union_obj));
    case UComponent_Element: return verifier.VerifyTable(reinterpret_cast<const Element *>(union_obj));
    case UComponent_Button: return verifier.VerifyTable(reinterpret_cast<const Button *>(union_obj));
    case UComponent_Image: return verifier.VerifyTable(reinterpret_cast<const Image *>(union_obj));
    case UComponent_ProgressBar: return verifier.VerifyTable(reinterpret_cast<const ProgressBar *>(union_obj));
    default: return false;
  }
}

}  // namespace XFB_UI

#endif  // FLATBUFFERS_GENERATED_FBUISTATEDATA_XFB_UI_H_
