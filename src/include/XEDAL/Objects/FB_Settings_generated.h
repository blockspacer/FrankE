// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBSETTINGS_FBSETTINGS_H_
#define FLATBUFFERS_GENERATED_FBSETTINGS_FBSETTINGS_H_

#include "flatbuffers/flatbuffers.h"


namespace FBSettings {

struct Graphics;
struct Settings;

enum FSAA {
  FSAA_none = 0,
  FSAA_x8 = 8,
  FSAA_x16 = 16,
  FSAA_x32 = 32
};

struct Graphics FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t fullscreen() const { return GetField<uint8_t>(4, 0); }
  FSAA fsaa() const { return static_cast<FSAA>(GetField<uint16_t>(6, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* fullscreen */) &&
           VerifyField<uint16_t>(verifier, 6 /* fsaa */) &&
           verifier.EndTable();
  }
};

struct GraphicsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_fullscreen(uint8_t fullscreen) { fbb_.AddElement<uint8_t>(4, fullscreen, 0); }
  void add_fsaa(FSAA fsaa) { fbb_.AddElement<uint16_t>(6, static_cast<uint16_t>(fsaa), 0); }
  GraphicsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicsBuilder &operator=(const GraphicsBuilder &);
  flatbuffers::Offset<Graphics> Finish() {
    auto o = flatbuffers::Offset<Graphics>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Graphics> CreateGraphics(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t fullscreen = 0,
   FSAA fsaa = FSAA_none) {
  GraphicsBuilder builder_(_fbb);
  builder_.add_fsaa(fsaa);
  builder_.add_fullscreen(fullscreen);
  return builder_.Finish();
}

///resource folders
struct Settings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Graphics *graphics() const { return GetPointer<const Graphics *>(4); }
  const flatbuffers::String *windowTitle() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* graphics */) &&
           verifier.VerifyTable(graphics()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* windowTitle */) &&
           verifier.Verify(windowTitle()) &&
           verifier.EndTable();
  }
};

struct SettingsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_graphics(flatbuffers::Offset<Graphics> graphics) { fbb_.AddOffset(4, graphics); }
  void add_windowTitle(flatbuffers::Offset<flatbuffers::String> windowTitle) { fbb_.AddOffset(6, windowTitle); }
  SettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SettingsBuilder &operator=(const SettingsBuilder &);
  flatbuffers::Offset<Settings> Finish() {
    auto o = flatbuffers::Offset<Settings>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Settings> CreateSettings(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Graphics> graphics = 0,
   flatbuffers::Offset<flatbuffers::String> windowTitle = 0) {
  SettingsBuilder builder_(_fbb);
  builder_.add_windowTitle(windowTitle);
  builder_.add_graphics(graphics);
  return builder_.Finish();
}

inline const FBSettings::Settings *GetSettings(const void *buf) { return flatbuffers::GetRoot<FBSettings::Settings>(buf); }

inline bool VerifySettingsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<FBSettings::Settings>(); }

inline void FinishSettingsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<FBSettings::Settings> root) { fbb.Finish(root); }

}  // namespace FBSettings

#endif  // FLATBUFFERS_GENERATED_FBSETTINGS_FBSETTINGS_H_
